foo
IntegerRle(Int32[ collect(1:1000) ], Int32[collect(5:5:5000]));
IntegerRle(Int32[ collect(1:1000) ], Int32[collect(5:5:5000]))
IntegerRle(Int32(collect(1:1000)), Int32(collect(5:5:5000)))
IntegerRle(Int32[collect(1:1000)], Int32[collect(5:5:5000)])
IntegerRle(collect(1:1000), collect(5:5:5000))
collect(5:5:5000)
[collect(5:5:5000)]
foo = [collect(5:5:5000)]
foo = [collect(5:5:5000)];
typeof(foo)
foo = Int32[collect(5:5:5000)];
typeof(foo)
foo = Int32[collect(5:5:5000)]
Int32(collect(5:5:5000))
collect(5:5:5000)::Int32
collect(5:5:5000)::int32
int32(collect(5:5:5000))
foo = int32(collect(5:5:5000))
typeof(foo)
typeof(foo)
?nrun
typeof(foo)
typeof(foo)
Pkg.update("Gadfly")
Pkg.add("Gadfly")
Pkg.update()
Pkg.add("Cairo")
Pkg.add("FontConfig")
Pkg.add("Fontconfig")
Pkg.update()
exit()
foo = RLEVectors([1, 2, 3, 3])
foo = RLEVector([1, 2, 3, 3])
goo = RLEVector([1, 2, 3, 4])
disjoinn2(foo, goo)
disjoin2(foo, goo)
disjoin2(foo, goo)
foo
goo
goo = RLEVector([1, 3, 4])
disjoin2(foo, goo)
foo = RLEVector([1, 2, 3, 4])
goo = RLEVector([1, 3, 3, 4])
foo
goo
disjoin2(foo, goo)
collect(foo)
hcat(foo, goo)
vcat(foo, goo)
collect(foo)
collect(goo)
hcat(collect(foo), collect(goo))
vcat(collect(foo), collect(goo))
hcat(collect(foo), collect(goo))
goo = foo
disjoin2(foo, goo)
disjoin2(foo, goo)
foo = RLEVector([1, 2, 3, 4])
goo = RLEVector([1, 2, 3, 4])
disjoin2(foo, goo)
disjoin2(foo, goo)
foo
goo
goo
foo
foo
disjoin(foo, foo)
@timeit disjoin(foo, foo)
@timeit disjoin2(foo, foo)
@timeit disjoin2(foo, foo)
@timeit for i in 1:1e3 disjoin2(foo, foo) end
@timeit for i in 1:1e3 disjoin(foo, foo) end
disjoin(foo, foo)
length(foo)
typeof(disjoin(foo))
typeof(disjoin(foo, foo))
@timeit for i in 1:1e3 disjoin(foo, foo) end
length(foo)
length(foo)
disjoin(foo, foo)
disjoin2(foo, foo)
@timeit disjoin(foo, foo)
@timeit disjoin2(foo, foo)
@timeit for i in 1:1e2 disjoin2(foo, foo) end
@timeit for i in 1:1e2 disjoin(foo, foo) end
@timeit for i in 1:1e2 disjoin(foo.runends, foo.runends) end
@timeit for i in 1:1e2 disjoin2(foo, foo) end
@timeit for i in 1:1e2 disjoin(foo, foo) end
@timeit for i in 1:1e2 disjoin2(foo, foo) end
length(foo)
@timeit for i in 1:1e2 x = disjoin(foo, foo); bob = foo[x]; joe = foo[x]; end
@timeit for i in 1:10 x = disjoin(foo, foo); bob = foo[x]; joe = foo[x]; end
@timeit for i in 1:10 x = disjoin2(foo, foo); bob = foo.runends[x]; joe = foo.runends[x]; end
@timeit for i in 1:10 x = disjoin2(foo, foo) end
@timeit for i in 1:10 x = disjoin2(foo, foo); bob = x[2] + x[3]; end
@timeit for i in 1:10 x = disjoin2(foo, foo); bob = foo.runvalues[x] + foo.runvalues[x]; end
@timeit for i in 1:10 x = disjoin(foo, foo); bob = foo.runvalues[x] + foo.runvalues[x]; end
@timeit for i in 1:10 x = disjoin(foo, foo); bob = foo[x] + foo[x]; end
@timeit for i in 1:10 x = disjoin2(foo, foo); bob = x[2] + x[3]; end
33.6/1.4
 exit()
using RLEVectors
disjoin( RLEVector([1,2,3,4], [1,3,8,10]), RLEVector([4,5,6,7],[3,4,9,10]))
disjoin( RLEVector([4,5,6,7],[3,4,9,10]), RLEVector([1,2,3,4], [1,3,8,10]) )
foo .< foo
exit()
exit()
exit()
?sort
?sortperm
exit()
exit()
VERSION
exit()
VERSION
@code_warntype findmax(foo)
@code_warntype foo .< 3
findin(foo,[800,200,357])
@code_warntype findin(foo,[800,200,357])
@code_warntype rfirst(foo, 1)
foo = IntegerRle(Vector{Int64}(collect(1:1000)), Vector{Int64}(collect(5:5:5000)))
@code_warntype findin(foo,[800,200,357])
foo
foo = RLEVector(Vector{Int64}(collect(1:1000)), Vector{Int64}(collect(5:5:5000)))
@code_warntype findin(foo,[800,200,357])
foo = IntegerRle(Vector{Int64}(collect(1:1000)), Vector{Int64}(collect(5:5:5000)))
foo
@code_warntype findin(foo,[800,200,357])
re = foo.runends
typeof(re)
typeof(runends(foo, 1))
typeof(rfirst(foo, 1))
typeof(re[1])
@code_warntype rfirst(foo, 1)
@code_warntype rfirst(foo)
re[1] + 1
typeof(re[1] + 1)
typeof(re[1])
@code_warntype rwidth(foo)
@code_warntype rwidth(foo, 1)
first
exit()
@code_warntype rfirst(foo)
@code_warntype foo[100]
@code_warntype foo[801:900]
@code_warntype foo + 4
@code_warntype length(foo)
@code_warntype nrun(foo)
@code_warntype mean(foo)
@code_warntype maximum(foo)
@code_warntype rwidth(foo)
@code_warntype rlast(foo)
@code_warntype rfirst(foo)
@code_lowered rfirst(foo)
@code_native rfirst(foo)
@code_warntype x.runends[1] + 1
@code_warntype foo.runends[1] + 1
@code_warntype foo.runends[1] - 1
@code_warntype foo.runends[1]++
re = foo.runends[1]
re[1]
re[1]++
x = re[1]
x++
@code_warntype disjoin(foo.runends,foo.runends)
@code_warntype disjoin(foo.runends,foo.runends)
@code_warntype findin(foo,[800,200,357])
@code_warntype foo .< 3
@code_warntype median(foo)
@code_warntype findmax(foo)
findin(foo,[800,200,357])
@code_warntype findin(foo,[800,200,357])
@code_warntype findin(foo.runvalues, [800,200,357])
@code_warntype findin(foo, [800,200,357])
@code_warntype rfirst(foo, 1)
@code_warntype rfirst(foo, 2)
@code_warntype rfirst(foo, [800])
rfirst(foo, [800])
findin(foo, [800, 200, 357]); Profile.clear(); @profile for i in 1:1e6 findin(foo, [800, 200, 357]) end; ProfileView.view()
findin(foo, [800, 200, 357]); Profile.clear(); @profile for i in 1:1e6 findin(foo, [800, 200, 357]) end; ProfileView.view()
@code_warntype rfirst(foo, [800])
@code_warntype findin(foo, [800])
runs = findin(foo.runvalues, [800, 200, 357])
re = foo.runends
re[800]
i = runs[1]
i
typeof(re[i])
typeof(rfirst(foo, i))
rfirst(x,i):re[i] 
x = foo
rfirst(x,i):re[i] 
typeof(rfirst(x,i):re[i] )
  vcat( [ collect( rfirst(x,i):re[i] ) for i in runs ]... )
[ collect( rfirst(x,i):re[i] ) for i in runs ]
[ collect( rfirst(x,i):re[i] ) for i in runs ]...
[ collect( rfirst(x,i):re[i] ) for i in runs ]...
vcat( [ collect( rfirst(x,i):re[i] ) for i in runs ] )
typeof( findin(foo, [800] )
VERSION
exit()
exit()
