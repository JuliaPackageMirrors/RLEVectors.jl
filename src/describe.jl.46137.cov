        - ## Dimensions and descriptions
        - 
        - desc = doc"
        - # Describing `RLEVector` Objects
        - For an RLEVector `x = RLEVector([4,5,6],[3,6,9])`
        -  * `length(x)` The full length of the vector, uncompressed
        -  * `size(x)` Same as `length`, as for any other vector
        -  * `size(x,dim)` Returns `(length(x),1) for dim == 1`
        -  * `rstart(x)` The index of the beginning of each run
        -  * `rwidth(x)` The width of each run
        -  * `rstop(x)` The index of the end of each run
        -  * `rlast(x)` The data value for each run
        -  * `isempty(x)` Returns boolean, as for any other vector
        -  * `nrun(x)` Returns the number of runs represented in the array
        - 
        - ## See also
        - length, size, rstart, rwidth, rstop, rvalue, isempty, nrun
        - "
        - 
        - @doc desc ->
        - function ndims(x::RLEVector)
        -     return(1)
        - end
        - 
        - @doc desc ->
        - function nrun(x::RLEVector)
       96   length(x.runends)
        - end
        - 
        - @doc desc ->
        - function length{T1,T2<:Integer}(x::RLEVector{T1,T2})
      120   re = x.runends
      120   ind = endof(re)
      120   if (ind > 0)
      117     @inbounds len = re[ind]
        -   else
        3     len = zero(T2)
        -   end
      120   return(len)
        - end
        - 
        - @doc desc->
        - function size(x::RLEVector)
       15   (length(x),)
        - end
        - 
        - @doc desc->
        - function size(x::RLEVector, dim::Integer)
       17   len = length(x)
       17   if dim == 1
       17     return(len)
        -   else
        0     return( (len,1) )
        -   end
        - end
        - 
        - @doc desc->
        - function isempty(x::RLEVector)
        4   isempty(x.runends)
        - end
        - 
        - ### Getters
        - @doc desc->
        - function rfirst(x::RLEVector)
        1   re = x.runends
        1   rval = similar(re)
        1   prev = zero(eltype(re))
        1   for i in eachindex(re)
        3     @inbounds rval[i] = prev + 1
        3     @inbounds prev = re[i]
        -   end
        1   return(rval)
        - end
        - 
        - @doc desc->
        - function rfirst(x::RLEVector, run::Integer)
        7   run == 1 ? one(eltype(x.runends)) : x.runends[run-1] + 1
        - end
        - 
        - @doc desc->
        - function rwidth(x::RLEVector)
        8   re = x.runends
        8   rval = similar(re)
        8   prev = zero(eltype(re))
        8   for i in eachindex(re)
       36     @inbounds rei = re[i]
       36     @inbounds rval[i] = rei - prev
       36     @inbounds prev = rei
        -   end
        8   return(rval)
        - end
        - 
        - function rwidth(x::RLEVector, run::Integer)
       16   run == 1 ? x.runends[1] : x.runends[run] - x.runends[run-1]
        - end
        - 
        - @doc desc->
        - function rlast(x::RLEVector)
        1   x.runends
        - end
        - 
        - @doc desc->
        - function rvalue(x::RLEVector)
        2   x.runvalues
        - end
        - 
