        - ### Indexing
        - 
        - ## Helper functions
        - ## locate runs, get index of run corresponding to the i'th value in the expanded runs
        - function ind2run(rle::RLEVector, i::Integer)
      154   re = rle.runends
      154   n = length(re)
      154   run = searchsortedfirst(re,i,1,n)
      154   run <= n || throw(BoundsError())  # Can't be < 1
      153   return(run)
        - end
        - 
        - function ind2run(rle::RLEVector,i::UnitRange)
       19   re = rle.runends
       19   n = length(re)
       19   left_run = searchsortedfirst(re,first(i),1,n)
       19   right_run = searchsortedfirst(re,last(i),left_run,n)
       19   right_run <= n || throw(BoundsError())  # Can't be < 1
       19   return( left_run:right_run )
        - end
        - 
        - # get index of the run corresponding to the i'th value in the expanded runs, index in run and remainder of run
        - #  (runindex, index_in_run, values_in_run_after_i)
        - function ind2runcontext(rle::RLEVector, i::Integer)
       17   run = ind2run(rle, i)
       17   runend = rle.runends[run]
       17   ind_in_run = run == 1 ? i : i - rle.runends[run-1]
       17   (run, ind_in_run, runend - i)
        - end
        - 
        - function ind2runcontext(rle::RLEVector, i::UnitRange)
        1   s = start(i)
        1   e = last(i)
        1   n = length(rle)
        1   runs = ind2run(rle, i)
        1   left_run = start(runs)
        1   right_run = last(runs)
        1   runend = rle.runends[right_run]
        1   ind_in_run = left_run == 1 ? s : s - rle.runends[left_run-1]
        1   (left_run, right_run, ind_in_run, runend - e)
        - end
        - 
        - function setrun!(rle::RLEVector, value, i::Int)
        -   run = ind2run(rle,i)
        -   rle.runvalues[run] = value
        -   return(rle)
        - end
        - 
        - ## Just enough for AbstractArray
      104 Base.linearindexing{T<:RLEVector}(::Type{T}) = Base.LinearFast()
        - 
        4 endof(rle::RLEVector) = length(rle)
        - 
        - function Base.getindex(rle::RLEVector, i::Int)
       52   run = ind2run(rle,i)
       51   return( rle.runvalues[run] )
        - end
        - 
        - function Base.setindex!(rle::RLEVector, value, i::Int)
       72   run = ind2run(rle,i)
       72   runvalue = rle.runvalues[run]
       72   runend = rle.runends[run]
       72   value == runvalue && return rle # replace with same value, no-op
       69   previous_run = run - 1
       69   next_run = run + 1
       69   at_start_of_run = (previous_run > 0 && i == rle.runends[previous_run] + 1) || i == 1
       69   at_end_of_run = i == runend
       69   match_left = run > 1 && rle.runvalues[previous_run] == value
       69   match_right = run < nrun(rle) && rle.runvalues[next_run] == value
       69   if at_end_of_run
       33     if at_start_of_run # in a run of length 1
       24       if match_right && match_left
        2         splice!(rle.runvalues, previous_run:run)
        2         splice!(rle.runends, previous_run:run)
       22       elseif match_right
        3         splice!(rle.runvalues,run)
        3         splice!(rle.runends,run)
       19       elseif match_left
        5         splice!(rle.runvalues,run)
        5         splice!(rle.runends,previous_run)
        -       else
       14         rle.runvalues[run] = value
        -       end
        -     else # end of a run longer than 1
        9       if match_right
        2         rle.runends[run] = runend - 1
        -       else
        7         insert!(rle.runvalues, next_run, value)
        7         insert!(rle.runends, run, runend - 1)
        -       end
        -     end
       36   elseif at_start_of_run
       35     if match_left
       11       rle.runends[previous_run] = rle.runends[previous_run] + 1
        -     else
       24       insert!(rle.runvalues, run, value)
       24       insert!(rle.runends, run, i)
        -     end
        -   else # middle of a run, average case
        1     splice!(rle.runvalues, run, [runvalue,value,runvalue])
        1     splice!(rle.runends, run, [i-1,i,runend])
        -   end
       69   return(rle)
        - end
        - 
        - function Base.setindex!(rle::RLEVector, value::AbstractArray, ind::Array{Bool, 1})
        1     rle[ find(ind) ] = value
        - end
        - 
        - function Base.setindex!(rle::RLEVector, value::AbstractArray, ind::AbstractArray)
        4     @inbounds for (i, v) in zip(ind, value)
       12         rle[i] = v
        -     end
        4     return(rle)
        - end
        - 
        - ## Indexing optimizations
        - # Range case optimization
        - function Base.getindex(rle::RLEVector, indices::UnitRange)
        8   runs = ind2run(rle,indices)
        8   nrun = length(runs)
        8   rv = rle.runvalues[runs]
        8   re = similar(rle.runends, nrun)
        8   offset = start(indices) - 1
        8   @inbounds for (i,r) in enumerate( start(runs):(last(runs) - 1) )
       16     re[i] = rle.runends[r] - offset
        -   end
        8   re[nrun] = last(indices) - offset # length(indices)
        8   rval = RLEVector{eltype(rv),eltype(re)}(rv,re)
        8   return(rval)
        - end
        - 
        - #function Base.getindex(rle::RLEVector, i::AbstractVector)
        - #    run_indices = searchsortedfirst(rle.runends, i)
        - #    return( rle.runvalues[ run_indices ] )
        - #end
        - 
        - function Base.setindex!(rle::RLEVector, value, indices::UnitRange)
        9   runs = ind2run(rle,indices)
        9   left_run = first(runs)
        9   right_run = last(runs)
        9   left_runvalue = rle.runvalues[left_run]
        9   right_runvalue = rle.runvalues[right_run]
        9   left_runend = rle.runends[left_run]
        9   right_runend = rle.runends[right_run]
        9   left_i = start(indices)
        9   right_i = last(indices)
        9   previous_run = left_run - 1
        9   next_run = right_run + 1
        9   at_start_of_run = (previous_run > 0 && left_i == rle.runends[previous_run] + 1) || left_i == 1
        9   at_end_of_run = right_i == right_runend
        9   match_left = left_run > 1 && rle.runvalues[previous_run] == value
        9   match_right = right_run < nrun(rle) && rle.runvalues[next_run] == value
        9   adjusted_runvalues = Array(typeof(left_runvalue),0)
        9   adjusted_runends = Array(typeof(left_runend),0)
        9   if at_end_of_run
        6     if at_start_of_run # in a run of length 1
        4       if match_right && match_left
        1         left_run = previous_run
        3       elseif match_right
        -         # do nothing
        2       elseif match_left
        1         rle.runends[previous_run] = right_runend
        -       else
        1         rle.runvalues[right_run] = value
        1         right_run = right_run - 1
        -       end
        -     else
        2       if match_right
        1         rle.runends[left_run] = left_i - 1
        1         left_run = left_run + 1
        -       else
        1         adjusted_runvalues = [left_runvalue,value]
        1         adjusted_runends = [left_i-1,right_i]
        -       end
        -     end
        3   elseif at_start_of_run
        2     if match_left
        1       rle.runends[previous_run] = last(indices)
        1       right_run = right_run - 1
        -     else
        1       adjusted_runvalues = [value,right_runvalue]
        1       adjusted_runends = [right_i,right_runend]
        -     end
        -   else # middle of a run, average case
        1     adjusted_runvalues = [left_runvalue,value,right_runvalue]
        1     adjusted_runends = [left_i-1,right_i,right_runend]
        -   end
        9   adjusted_runs = left_run:right_run
        9   splice!(rle.runvalues,adjusted_runs,adjusted_runvalues)
        9   splice!(rle.runends,adjusted_runs,adjusted_runends)
        9   return(rle)
        - end
        - 
        - ## Getter shortcuts
        - function head(x::RLEVector,l::Integer=6)
        3     collect(x[ 1:l ])
        - end
        - 
        - function tail(x::RLEVector,l::Integer=6)
        3     collect( x[ length(x)-(l-1):end ] )
        - end
        - 
        - ## Iterators
        - function start(rle::RLEVector)
        1   (1,1)
        - end
        - 
        - function next(rle::RLEVector, state)
        8   if state[2] == rle.runends[ state[1] ]
        4     newstate = (state[1] + 1, state[2] + 1)
        -   else
        4     newstate = (state[1],state[2] + 1)
        -   end
        8   return( (rle.runvalues[state[1]], newstate) )
        - end
        - 
        - function done(rle::RLEVector, state)
        9   state[1] > nrun(rle)
        - end
        - 
        - # Iterator for ranges based on RLE e.g. (value, start, end)
        - immutable RLEEachIterator{T1,T2}
        -     rle::RLEVector{T1,T2}
        - end
        - each(x::RLEVector) = RLEEachIterator(x)
        - 
        - function start(x::RLEEachIterator)
        -     1
        - end
        - 
        - function next(x::RLEEachIterator, state)
        -     newstate = state + 1
        -     first = rfirst(x.rle,state)
        -     last = rlast(x.rle)[state]
        -     ( (rvalue(x.rle)[state], first:last ), newstate )
        - end
        - 
        - function done(x::RLEEachIterator, state)
        -     state > nrun(x.rle)
        - end
        - 
        - 
